---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: {{ .Values.cluster.metadata.name }}
spec:
  imageName: {{ .Values.cluster.spec.imagename.image }}:{{ .Values.cluster.spec.imagename.tag }}
  instances: {{ .Values.cluster.spec.instances }}

  env:
  - name: TZ
    value: Europe/Moscow

{{- if .Values.cluster.spec.resources_on }}
  resources:
    requests:
      memory: {{ .Values.cluster.spec.resources.requests.memory }}
      cpu: {{ .Values.cluster.spec.resources.requests.cpu }}
    limits:
      memory: {{ .Values.cluster.spec.resources.limits.memory }}
      cpu: {{ .Values.cluster.spec.resources.limits.cpu }}
{{- end }}

  enableSuperuserAccess: {{ .Values.cluster.spec.enablesuperuseraccess }}
{{- if .Values.cluster.spec.enablesuperuseraccess }}
  superuserSecret:
    name: {{ .Values.cluster.spec.superusersecret.name }}
{{- end }}

  # Example of rolling update strategy:
  # - unsupervised: automated update of the primary once all
  #                 replicas have been upgraded (default)
  # - supervised: requires manual supervision to perform
  #               the switchover of the primary
  primaryUpdateStrategy: unsupervised

  # Require XX Gi of space:
  storage:
    size: {{ .Values.cluster.spec.storage.size }}
  bootstrap:
    initdb:
      database: {{ .Values.cluster.spec.bootstrap.initdb.database }}
      owner: {{ .Values.cluster.spec.bootstrap.initdb.owner }}
{{- if .Values.cluster.spec.bootstrap.initdb.secret_on }}
      secret:
        name: {{ .Values.cluster.spec.bootstrap.initdb.secret.name }}
{{- end }}
      dataChecksums: true
      encoding: 'UTF8'
{{- if .Values.cluster.spec.bootstrap.initdb.postinitsql_on }}
      postInitSQL: # run commands on postgres db as postgres user
        - grant pg_read_all_data, pg_read_all_settings to myappuser;
        - grant pg_write_all_data to myappuser;
        - create extension pg_cron;
        - INSERT INTO cron.job (schedule, command, nodename, nodeport, database, username, jobname) VALUES ('5 0 * * 0', 'vacuum full;', '', 5432, 'myappdb', 'postgres', 'vacuum_full');
        - INSERT INTO cron.job (schedule, command, nodename, nodeport, database, username, jobname) VALUES ('5 3 * * *', 'vacuum analyze;', '', 5432, 'myappdb', 'postgres', 'maintenance');
        - INSERT INTO cron.job (schedule, command, nodename, nodeport, database, username, jobname) VALUES ('* * * * *', 'insert into myapp.size_hist(select_time,size,size_pretty,cluster_name,ip,port) select now() as select_time, size, size_pretty, cluster_name, inet_server_addr() as ip, inet_server_port() as port from (select sum(pg_database_size(datname)) as size, pg_size_pretty(sum(pg_database_size(datname))) as size_pretty from pg_database) as db, (select setting as cluster_name from pg_settings where name=''cluster_name'') as st;', '', 5432, 'myappdb', 'postgres', 'history');
        - CREATE ROLE cnpg_pooler_pgbouncer WITH LOGIN;
{{- end }}
{{- if .Values.cluster.spec.bootstrap.initdb.postinitapplicationsqlrefs_on }}
      postInitApplicationSQLRefs: # run scripts on myappdb db as postgres user
        secretRefs:
        - name: {{ .Values.cluster.spec.bootstrap.initdb.postinitapplicationsqlrefs.secretrefs.name }}
          key: {{ .Values.cluster.spec.bootstrap.initdb.postinitapplicationsqlrefs.secretrefs.key }}
        configMapRefs:
        - name: {{ .Values.cluster.spec.bootstrap.initdb.postinitapplicationsqlrefs.configmaprefs.name }}
          key: {{ .Values.cluster.spec.bootstrap.initdb.postinitapplicationsqlrefs.configmaprefs.key }}
{{- end }}
  affinity:
    enablePodAntiAffinity: {{ .Values.cluster.spec.podantyaffinity_on }}
{{- if .Values.cluster.spec.podantyaffinity_on }}
    topologyKey: kubernetes.io/hostname
    podAntiAffinityType: preferred
{{- end }}

{{- if .Values.cluster.spec.owncertificates_on }}
# Certificates (with my own ClusterIssuer):
  certificates:
    serverTLSSecret: {{ .Values.cluster.spec.certificates.servertlssecret }}
    serverCASecret: {{ .Values.cluster.spec.certificates.servercasecret }}
    clientCASecret: {{ .Values.cluster.spec.certificates.clientcasecret }}
    replicationTLSSecret: {{ .Values.cluster.spec.certificates.replicationtlssecret }}
{{- end }}

# Когда уже установили Prometheus-stack, можем добавить true для enablePodMonitor:
  monitoring:
    enablePodMonitor: {{ .Values.cluster.spec.monitoring.enablepodmonitor }}

{{- if .Values.cluster.spec.postgresqltuning_on }}
  postgresql:
    enableAlterSystem: true
    shared_preload_libraries:
      - auth_delay
      - pg_cron
# auto_explain, pg_stat_statements, pgaudit и pg_failover_slots автоматически 
# добавятся в shared_preload_libraries, 
# если задать параметры, которые их настраивают (см. ниже).
# Поэтому в секции shared_preload_libraries мы их не задаем.
    parameters:
      pg_stat_statements.max: "10000"
      pg_stat_statements.track: all
      auto_explain.log_min_duration: "15s"
      pgaudit.log: "ddl, role, misc_set"
      pgaudit.log_catalog: "off"
      pgaudit.log_parameter: "on"
      pgaudit.log_relation: "on"
      max_connections: "500"
      auth_delay.milliseconds: "1000" # milliseconds between password auth tries
      random_page_cost: "2" # ~ random page cost for SSD
      checkpoint_completion_target: "0.9" # more soft checkpoint
      shared_buffers: "2048MB" # 2048MB = 2GB = 25% of RAM
      effective_cache_size: "6144MB" # 6144MB = 6GB = 75% of RAM или выше, на это значение просто ориентировочно полагается планировщик запросов, оно даже не является ограничением
      maintenance_work_mem: "512MB"
      autovacuum_work_mem: "256MB"
      work_mem: "32MB"
      temp_buffers: "32MB"
      max_worker_processes: "32"
      max_parallel_workers: "16"
      max_parallel_workers_per_gather: "2" # count of CPUs
      max_locks_per_transaction: "256"
      default_statistics_target: "200" # samples and histograms for statistics
      superuser_reserved_connections: "5"
      log_timezone: "Europe/Moscow"
      timezone: "Europe/Moscow"
    pg_hba:
      - hostssl all postgres,myappuser,streaming_replica all cert
      - hostnossl all postgres,myappuser,streaming_replica all reject
      - hostssl replication postgres,streaming_replica all cert
      - hostnossl replication postgres,streaming_replica all reject
{{- end }}

{{- if .Values.cluster.spec.backup_on }}
  backup:
    retentionPolicy: {{ .Values.cluster.spec.backup.retentionpolicy }}
    barmanObjectStore:
      destinationPath: {{ .Values.cluster.spec.backup.barmanobjectstore.destinationpath }}
      endpointURL: {{ .Values.cluster.spec.backup.barmanobjectstore.endpointurl }}
      s3Credentials: # Данные для доступа к bucket’у.
        accessKeyId:
          name: {{ .Values.cluster.spec.backup.barmanobjectstore.s3credentials.accesskeyid.name }}
          key: {{ .Values.cluster.spec.backup.barmanobjectstore.s3credentials.accesskeyid.key }}
        secretAccessKey:
          name: {{ .Values.cluster.spec.backup.barmanobjectstore.s3credentials.secretaccesskey.name }}
          key: {{ .Values.cluster.spec.backup.barmanobjectstore.s3credentials.secretaccesskey.key }}
      wal:
        compression: gzip # Включено сжатие WAL.
{{- end }}

